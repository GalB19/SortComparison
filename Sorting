import java.util.Arrays;
import java.util.Random;

public class Main {

    public static void main(String[] args) {
        int size = 10000; // Размер массива
        int[] array = generateRandomArray(size);

        // Сравнение алгоритмов
        compareSorts(array);
    }

    // Генерация случайного массива
    private static int[] generateRandomArray(int size) {
        Random random = new Random();
        int[] array = new int[size];
        for (int i = 0; i < size; i++) {
            array[i] = random.nextInt(10000); // Случайные числа от 0 до 9999
        }
        return array;
    }

    // Сравнение алгоритмов сортировки
    private static void compareSorts(int[] originalArray) {
        // Сортировка с помощью Bubble Sort
        int[] bubbleArray = Arrays.copyOf(originalArray, originalArray.length);
        long startTime = System.nanoTime();
        bubbleSort(bubbleArray);
        long endTime = System.nanoTime();
        System.out.println("Bubble Sort time: " + (endTime - startTime) + " ns");

        // Сортировка с помощью Selection Sort
        int[] selectionArray = Arrays.copyOf(originalArray, originalArray.length);
        startTime = System.nanoTime();
        selectionSort(selectionArray);
        endTime = System.nanoTime();
        System.out.println("Selection Sort time: " + (endTime - startTime) + " ns");

        // Сортировка с помощью Arrays.sort()
        int[] javaArray = Arrays.copyOf(originalArray, originalArray.length);
        startTime = System.nanoTime();
        Arrays.sort(javaArray);
        endTime = System.nanoTime();
        System.out.println("Arrays.sort() time: " + (endTime - startTime) + " ns");
    }

    // Реализация Bubble Sort
    private static void bubbleSort(int[] array) {
        int n = array.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (array[j] > array[j + 1]) {
                    // Меняем местами array[j] и array[j+1]
                    int temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                }
            }
        }
    }

    // Реализация Selection Sort
    private static void selectionSort(int[] array) {
        int n = array.length;
        for (int i = 0; i < n - 1; i++) {
            int minIndex = i;
            for (int j = i + 1; j < n; j++) {
                if (array[j] < array[minIndex]) {
                    minIndex = j;
                }
            }
            // Меняем местами array[minIndex] и array[i]
            int temp = array[minIndex];
            array[minIndex] = array[i];
            array[i] = temp;
        }
    }
}
