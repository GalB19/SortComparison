import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import java.util.*;
public class Main {
    public static void main(String[] args) {

/*
Задание 2: Реализуй метод, в котором создаются ArrayList, LinkedList и заполняются 1 000 000 случайными элементами
одного и того же типа. После из ArrayList и LinkedList 1000 раз выбираем элемент по случайному индексу.
Замерь время для ArrayList и LinkedList.
Сравни результаты и предположи, почему они могут отличаться.
*/

/*
Доступ к элементу по индексу в ArrayList занимает константное время O(1),
в то время как для доступа к элементу в LinkedList необходимо проитерироваться по каждому элементу до искомого O(n)
*/
        int size = 1_000_000;
        int iterations = 1000;
        Random random = new Random();

        // Заполнение ArrayList
        List<Integer> arrayList = new ArrayList<>(size);
        for (int i = 0; i < size; i++) {
            arrayList.add(random.nextInt());
        }

        // Заполнение LinkedList
        List<Integer> linkedList = new LinkedList<>();
        for (int i = 0; i < size; i++) {
            linkedList.add(random.nextInt());
        }

        // Измерение времени доступа для ArrayList
        long startTime = System.nanoTime();
        for (int i = 0; i < iterations; i++) {
            int index = random.nextInt(size);
            arrayList.get(index);
        }
        long endTime = System.nanoTime();
        long arrayListTime = endTime - startTime;
        // Измерение времени доступа для LinkedList
        startTime = System.nanoTime();
        for (int i = 0; i < iterations; i++) {
            int index = random.nextInt(size);
            linkedList.get(index);
        }
        endTime = System.nanoTime();
        long linkedListTime = endTime - startTime;
        // Вывод результатов
        System.out.println("Время доступа для ArrayList: " + arrayListTime + " нс");
        System.out.println("Время доступа для LinkedList: " + linkedListTime + " нс");

        // Сравнение результатов
        if (arrayListTime < linkedListTime) {
            System.out.println("ArrayList быстрее, чем LinkedList.");
        } else {
            System.out.println("LinkedList быстрее, чем ArrayList.");
        }
    }
}





